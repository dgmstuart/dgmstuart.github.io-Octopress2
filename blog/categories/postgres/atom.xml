<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgres | dgms code]]></title>
  <link href="http://dgmstuart.github.io/blog/categories/postgres/atom.xml" rel="self"/>
  <link href="http://dgmstuart.github.io/"/>
  <updated>2014-08-21T10:53:05+01:00</updated>
  <id>http://dgmstuart.github.io/</id>
  <author>
    <name><![CDATA[Duncan Stuart]]></name>
    <email><![CDATA[dgmstuart@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating Postgres Data From an Old Rails Project to a New One]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/08/20/migrating-postgres-data-from-an-old-rails-project-to-a-new-one/"/>
    <updated>2014-08-20T23:29:31+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/08/20/migrating-postgres-data-from-an-old-rails-project-to-a-new-one</id>
    <content type="html"><![CDATA[<p>TL;DR &ndash; this was my approach:</p>

<ol>
<li>create migrations on the old project to transform the data into the new schema structure</li>
<li>run these migrations on a dump of the live database</li>
<li>dump just the data of the tables you care about from the migrated database with pg_dump</li>
<li>import this dump into the new database with psql</li>
</ol>


<p>Once I worked through a few kinks, it was all remarkably straightforward.</p>

<h2>Background</h2>

<ul>
<li><a href="https://github.com/dgmstuart/Swing-Out-London">Swing Out London</a> is a cms for managing swing events</li>
<li>I&rsquo;m rebuilding it from scratch as <a href="https://github.com/dgmstuart/swingoutlondon2">a totally new project</a></li>
<li>In particular the <a href="https://github.com/dgmstuart/Swing-Out-London/blob/274f64e1d635bcd8d2678eb6a0dfa50516ef64ba/db/schema.rb">old data model</a> was insane and the <a href="https://github.com/dgmstuart/swingoutlondon2/blob/daa4397f1e9d772a5b5302cdd369b81201c8ec84/db/schema.rb">new one</a>  is turning out much cleaner</li>
<li>The current live system is Rails 3 and hosted on Heroku &ndash; so uses postgres for the live database, but uses sqlite for the development database</li>
<li>The new system is Rails 4 and uses postgres for the development database</li>
</ul>


<p>I want to be able to import data from the current live site into my work-in-progress new schema as I go along, for a few reasons:</p>

<ol>
<li>Doing the migration incrementally will hopefully be easier than doing it all in one go at the end</li>
<li>Working with real data will help me make better design decisions earlier</li>
<li>Being able to see what is missing between the old and new schemas will help to make sure I don&rsquo;t miss anything</li>
</ol>


<h2>The challenge</h2>

<p>Data which in the old app exists in one god object (<code>event</code>) needs to be divided between three tables in the new app (<code>events</code>, <code>event_seeds</code>, <code>event_generators</code>).</p>

<p>In particular, in the new app, events with individual dates are modelled by having:</p>

<ul>
<li>an <code>event_generator</code> with a date, which belongs to&hellip;</li>
<li>an <code>event_seed</code> (which holds the main data) and belongs to&hellip;</li>
<li>an <code>event</code> which groups <code>event_seed</code>s together.</li>
</ul>


<p>In the old app, dates are stored in a <code>swing_dates</code> table (which has unique entries)
and associated with <code>events</code> via a join table: <code>event_swing_dates</code> <em>(Don&rsquo;t do this. If you can believe it, this was done in an attempt to speed up database queries)</em>.</p>

<p>The thought of transforming this data at the SQL level gives me a headache. Fortunately in the old app this complexity is hidden under the hood and events just have a <code>#dates</code> method which pulls out the relevant list. For the sake of sanity, my import solution needs to take advantage of that method &ndash; hence doing the transformation at the application level using migrations.</p>

<h2>Step 0: Convert the old app to use postgres</h2>

<p>I had never gotten around to updating the old app to use posgres in development, so the first step was to sort that out. Luckily this is pretty easy:</p>

<ol>
<li>In the <code>Gemfile</code>, remove the <code>sqlite3</code> gem and move the <code>pg</code> gem out of the production group.</li>
<li>In <code>database.yml</code>, change the sqlite config to a posgres config</li>
</ol>


<h2>Step 1: Create migrations</h2>

<p>I used a number of migrations to do the data transformation. Since some of them are irreversible, there&rsquo;s no real reason to separate them out, other than organising the code:</p>

<h3>ChangeVenuesToNewFormat</h3>

<p>The venues table isn&rsquo;t changing much so this just involved renaming a column, adding some not-null constraints (probably not necessary) and dropping the columns which aren&rsquo;t being imported yet (<a href="https://github.com/dgmstuart/Swing-Out-London/blob/01df37393444e4d3e217c870d6b3164e001288f0/db/migrate/20140820003740_change_venues_to_new_format.rb">source</a>)</p>

<h3>CreateNewEventsTables</h3>

<p>This involved copying the section of the schema in the new app which creates the tables for the <code>event_seeds</code> and <code>event_generators</code> tables. This way the tables are exactly the same as the new schema. (<a href="https://github.com/dgmstuart/Swing-Out-London/blob/9069b2d1b4103b781a7b3e9951317c40c1d3fb2b/db/migrate/20140820082042_create_new_events_tables.rb">source</a>)</p>

<h3>MoveDataToNewEventTables</h3>

<p>This is where the gnarly stuff happens. First I need a way of putting data into the new tables. I could go and create full models in the app, but it&rsquo;s possible to just create lightweight classes right in the migration:</p>

<p><code>ruby
class EventSeed &lt;  ActiveRecord::Base
  belongs_to :event
  belongs_to :venue
end
class EventGenerator &lt; ActiveRecord::Base
  belongs_to :event_seed
end
</code>
I guess I should maybe also have included all of the validations here, but I&rsquo;m fairly confident that the validations are basically equivalent between the two apps, and in any case, the relevant fields have <code>null: false</code> constraints on them in the database, so I&rsquo;m not going to sweat it.</p>

<p>Now we can actually create the new records:</p>

<p>```ruby
def change
  Event.all.each do |event|</p>

<pre><code>event_seed = create_event_seed(event)

if event.frequency == 1
  start_date = event.first_date || Date.new(2001,1,1)
  create_event_generator(1, start_date, event, event_seed)
else
  event.dates.each do |date|
    create_event_generator(0, date, event, event_seed) if date &gt; Date.today
  end
end
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
<code>``
Note the use of</code>event.dates`.</p>

<p><code>create_event_seed</code> and <code>create_event_generator</code> are just wrappers around
<code>EventGenerator.create</code> and <code>EventSeed.create</code> for convenience.</p>

<p>This migration also dropped most of the fields on <code>events</code> but kept the original ids intact &ndash; I have a feeling that will turn out to be useful later on. (<a href="https://github.com/dgmstuart/Swing-Out-London/blob/01df37393444e4d3e217c870d6b3164e001288f0/db/migrate/20140820082444_move_data_to_new_event_tables.rb">source</a>)</p>

<h3>CreateNonMigrationTables and DropUnusedTables</h3>

<p>These migrations create the remaining missing tables (like Users, which we&rsquo;re not going to import data into) and drop the tables which don&rsquo;t yet have any counterpart in the new app. (<a href="https://github.com/dgmstuart/Swing-Out-London/blob/01df37393444e4d3e217c870d6b3164e001288f0/db/migrate/20140820210352_create_non_migration_tables.rb">source 1</a>, <a href="https://github.com/dgmstuart/Swing-Out-London/blob/01df37393444e4d3e217c870d6b3164e001288f0/db/migrate/20140820210653_drop_unused_tables.rb">source 2</a>)</p>

<p>Given that in the end I only migrated data from specific tables, this probably wasn&rsquo;t necessary, but it&rsquo;s handy to be able to verify that the schemas between the old and new app exactly match, and to see what hasn&rsquo;t been migrated yet.</p>

<h2>Step 2: Run the migrations on the live database</h2>

<p>So we&rsquo;ve now got a set of migrations which convert the old schema into the latest version of the new schema. Time to test it out on some real data.</p>

<p>Getting a database dump from heroku is easy. You first need to drop the existing development database with <code>dbdrop soldn1_dev</code> and then you can create a new one as a copy of the live database. For me that looks like this:</p>

<pre><code>heroku pg:pull HEROKU_POSTGRESQL_GRAY soldn1_dev
</code></pre>

<p>Then it&rsquo;s just a case of <code>rake db:migrate</code> and cross your fingers. If it&rsquo;s successful then the <code>schema.rb</code> files should match between the old and new app (perhaps modulo some indexes).</p>

<h2>Step 3: Dump the data</h2>

<p>So now we&rsquo;ve got our data into the form we want it, how do we actually move it into the new database?</p>

<p>Dumping the whole database would mean we&rsquo;d carry over the <code>schema_migrations</code> table as well. <code>schema_migrations</code> consists of a list of identifiers which match up to an app&rsquo;s migration files &ndash; it&rsquo;s what Rails uses to track which migrations have been run, which is important for e.g. <code>rake db</code> commands, so we don&rsquo;t want to modify it.</p>

<p>The simplest approach seems to be to dump only the tables which actually contain data which we want to migrate:</p>

<pre><code>pg_dump soldn1_dev -a -t event_generators -t event_seeds -t events -t venues &gt; dump
</code></pre>

<p><code>pg_dump</code> actually writes to <code>stdout</code>, so that <code>&gt; dump</code> creates a file from the output.</p>

<p>The <code>-a</code> flag tells <code>pg_dump</code> to dump only the data. Although we&rsquo;ve engineered a state where the migrations on the old site and the new site both result in the same schema, it seems cleaner to only move across the data rather than recreating the tables.</p>

<h2>Step 4: Import the data</h2>

<p>If there are any records already in the relevant tables with IDs which would clash with data in the import then this would need to be resolved somehow before importing. I don&rsquo;t care about any existing data, so I&rsquo;m happy to resolve it by clearing out any existing records with <code>rake db:reset</code>.</p>

<p>To load the data from the dump file:</p>

<pre><code>psql soldn2_dev &lt; dump
</code></pre>

<p>And that&rsquo;s it: the data is now in the new database. Job done.</p>

<p><em>Thanks to <a href="https://twitter.com/zeeraw">@zeeraw</a> for the suggestion to use Rails migrations</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting to Grips With Postgres]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/02/07/getting-to-grips-with-postgres/"/>
    <updated>2014-02-07T12:10:20+00:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/02/07/getting-to-grips-with-postgres</id>
    <content type="html"><![CDATA[<p>So, having generated my Rails app and selected postgres as the development database, I&rsquo;m now faced with getting the damn thing running. On a Eurostar train (under the English channel) i.e. with no internet.</p>

<p>In the process I learned some things about using documentation without an internet connection, and about postgres.</p>

<h2>TL;DR</h2>

<p>Steps to get postgres working with Rails on OSX:</p>

<ul>
<li>Install postgres with homebrew: <code>brew install postgres</code></li>
<li>Start the postgres server according to the instructions in <code>brew info postgres</code></li>
<li>Create a database user with <code>createuser [username]</code> &ndash; making sure to give it database creation privelleges</li>
<li>Run rake db:create</li>
</ul>


<h2>Why postgres?</h2>

<p>Previously I&rsquo;d always just used sqlite for development (which is pretty much zero-configuration) and at work we historically used MySQL because the ops guys are mostly supporting WordPress sites (MySQL is the default database for WordPress). The current version of Swing Out London uses postgres in production(Heroku), but if I recall correctly heroku handled all the setup, so I&rsquo;ve never really had to work with postgres before.</p>

<p>For SOLDN2 I want to start using postgres locally as well as on production to try and avoid any issues e.g. when copying the prod database locally.</p>

<h2>Running the postgres server</h2>

<p>I&rsquo;m using Zeus, so the first thing I tried was starting up the rails server (<code>zeus s</code>). I got some sort of error about not being able to connect to the database</p>

<p>I&rsquo;d previously installed postgres using homebrew (<code>brew install postgres</code>), but it seems I hadn&rsquo;t actually set it up properly, so there was no server running. <code>brew info postgres</code> told me I needed to run a few commands:</p>

<pre><code># Create a database running with a user named after my system user:
% initdb /usr/local/var/postgres -E utf8

# Run the database server in the background
% pg_ctl -D /usr/local/var/postgres -l logfile start

# Set up the postgres server to start at login:
% ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
</code></pre>

<p>So that created a database with a user of duncanstuart &ndash; not sure if that&rsquo;s right. Is that like a box for my application DB&rsquo;s to go in, or is it a single database in itself?</p>

<h2>Database config</h2>

<p>So now on restarting zeus and running the rails sever I get this error:</p>

<pre><code>PG::ConnectionBad at /
FATAL:  role "myapp" does not exist
</code></pre>

<p>Looking at my <code>database.yml</code>, it seemed that the application generator had set up several &lsquo;myapp&rsquo; databases:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>database.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span>     <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unicode</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myapp_development</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span>     <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myapp</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">template0&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;  &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Replacing myapp with swingoutlondon, I dared to hope that running <code>rake db:create</code> would just create these databases for me&hellip;</p>

<h2>Getting at the docs</h2>

<p>No such luck:</p>

<pre><code>FATAL:  role "swingoutlondon" does not exist
</code></pre>

<p>I haven&rsquo;t come across the term &lsquo;role&rsquo; before, but given that it&rsquo;s from the username field in the database.yml, I guess that&rsquo;s what postgres calls its db users? Somehow I need to create that role manually.</p>

<p>Needing some documentation: how do you get a console up in postgres? for MySQL it&rsquo;s just <code>mysql</code>, but just <code>postgres</code> (or actually postgres -D /usr/local/var/postgres) seems to be the command for starting the server.</p>

<p><code>postgres --help</code> wasn&rsquo;t much help. In the install directory for postgres (in my case <code>/usr/local/Cellar/postgresql/9.1.2/</code>) there&rsquo;s a <code>share</code> directory contain man and lib. <code>lib postgres</code> wasn&rsquo;t much help either, but looking at <code>/usr/local/Cellar/postgresql/9.1.2/share/doc/postgresql/html/index.html</code> in my browser brings up an html view of some long-form docs. Now we&rsquo;re cooking.</p>

<h2>Postgres console</h2>

<p>The postgres console command is <code>psql</code>:</p>

<pre><code>psql: FATAL:  database "duncanstuart" does not exist
</code></pre>

<p>OK, so I guess the default looks for a database named after my system user, and I guess this means I hadn&rsquo;t created a database in the steps above. So let&rsquo;s create a dev database:</p>

<pre><code>% createdb swingoutlondon_development
% psql swingoutlondon_development
</code></pre>

<p>Bingo! I&rsquo;m in the (pretty odd looking postgres console). <code>\h</code> brings up a list of commands. Let&rsquo;s create the role:</p>

<pre><code>&gt; CREATE ROLE swingoutlondon;
</code></pre>

<p>That didn&rsquo;t return any output. Looking at the list of commands I can&rsquo;t see how to list the roles, but running the command a second time complains that the role already exists, so I guess it&rsquo;s OK.</p>

<h2>Actually, screw the postgres console</h2>

<p>Looking back at the html docs to find out more about roles it seems like a better way to do this is from the command line:</p>

<pre><code>% createuser swingoutlondon
</code></pre>

<p>This gives me a few options;</p>

<pre><code>Shall the new role be a superuser? (y/n)
#=&gt; n
Shall the new role be allowed to create databases? (y/n) y
#=&gt; y
Shall the new role be allowed to create more new roles? (y/n) n
#=&gt; n
</code></pre>

<p>Not sure about those options, but my rationale is, there&rsquo;s no need for the user to have any special privelliges, but perhaps if I let it create databases then my <code>rake db:create</code> will work(?).</p>

<p>&hellip;and indeed it does! Restarting zeus I get the familiar Rails &ldquo;Welcome Aboard&rdquo; page</p>
]]></content>
  </entry>
  
</feed>
