<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wordpress | dgms code]]></title>
  <link href="http://dgmstuart.github.io/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://dgmstuart.github.io/"/>
  <updated>2015-03-28T13:50:03+00:00</updated>
  <id>http://dgmstuart.github.io/</id>
  <author>
    <name><![CDATA[Duncan Stuart]]></name>
    <email><![CDATA[dgmstuart@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mark Jaquith at WordCamp London - Cache Money Business]]></title>
    <link href="http://dgmstuart.github.io/blog/2015/03/22/mark-jaquith-at-wordcamp-london-cache-money-business/"/>
    <updated>2015-03-22T11:31:06+00:00</updated>
    <id>http://dgmstuart.github.io/blog/2015/03/22/mark-jaquith-at-wordcamp-london-cache-money-business</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://london.wordcamp.org/2015/">WordCamp London</a> - live-blogging
some of the talks</em></p>

<p><img src="https://pbs.twimg.com/media/CAs0AgdWEAApTMb.jpg" alt="Mark Jaquith talking caching at #wcldn - photo by @davepullig on
twitter" /></p>

<p><em>photo of <a href="https://twitter.com/markjaquith">Mark Jaquith</a> by <a href="https://twitter.com/davepullig/">Dave Pullig</a></em></p>

<ul>
<li>Ultimately failing to cache could take your site down: run out of connections</li>
<li>Caching principles:

<ul>
<li>Do less work - By default WP is Totally dynamic - there&rsquo;s a lot of
complex stuff going on and it all gets done on every single request</li>
<li>Hold onto data as long as it makes sense to do so: this is very specific
to each individual site (at least for certain kinds of content)</li>
<li>Make output generic: the more specific it is to a particular user, the
less cachable it is</li>
</ul>
</li>
<li>Page caching:

<ul>
<li>Batcache - if a page gets requested more than 3 times in 3 mins it
caches that whole page for 6 mins</li>
<li>Used by WP.com</li>
<li>Unobtrusive - only caches the most frequently requested stuff</li>
<li>low-configuration</li>
</ul>
</li>
<li>W3TotalCache

<ul>
<li>Extremely complex, lots of layers</li>
</ul>
</li>
<li>WPSuperCache

<ul>
<li>Somewhere in-between</li>
</ul>
</li>
<li>Varnish or Nginx

<ul>
<li>Cache before it hits the webserver</li>
</ul>
</li>
<li>CDN

<ul>
<li>geographically distributed caches: people access the cache closest to
them</li>
<li>Very popular for media files, but can be used for the whole site.</li>
<li>Will obey cache headers</li>
</ul>
</li>
<li>Nginx Cache Purging

<ul>
<li>This is tricky</li>
<li>There&rsquo;s a third party package which can be compiled from source which
enables this. But :-P</li>
<li>Approach: Configure a &lsquo;magic header&rsquo; ;) - when it&rsquo;s passed with a
request, it skips getting, but not setting, so overwrites whatever is
currently in the cache</li>
</ul>
</li>
<li>Variable cache lengths + proactive cache refreshing:

<ul>
<li>Warm the cache (on cron) more frequently than it&rsquo;s getting expired, to
make sure that your content is always cached</li>
</ul>
</li>
<li>Does being logged-in mean you can&rsquo;t cache the page?

<ul>
<li>It&rsquo;s a pain if you have 1000&rsquo;s of logged in users/active commenters etc.</li>
<li>Think about how the page varies based on who you are logged in as:
toolbar, private posts - etc.</li>
<li>Choice: remove those things OR make them generic</li>
<li>Comment forms: hide them by default, show them with ajax - either when
hitting a button, or when scrolling to the bottom of the page (!)</li>
<li>Remove toolbar for subscribers etc. - it&rsquo;s not very useful!</li>
<li>Remove private post fucntionality if it&rsquo;s not used: it makes the queries
much more complicated anyway</li>
<li>Replace moderated comments with a generic &ldquo;your comment is being
moderated&rdquo; message</li>
</ul>
</li>
<li>Approach if you really need to show logged-in data:

<ul>
<li>Use cookies: by default WP renders user-specific content using php, but
that&rsquo;s very odd</li>
<li>Set JS-readable cookies and use them to populate the content</li>
<li>He&rsquo;s just written <a href="https://github.com/markjaquith/cache-buddy">Cache Buddy</a> - a plugin to do this</li>
</ul>
</li>
<li>Object Caching

<ul>
<li>APCu, Memcache, or (recommended:) Redis</li>
<li>put them in <code>object-cache.php</code> - they need to be loaded before plugins</li>
</ul>
</li>
<li>Transients + Object Cache

<ul>
<li>For just a few values use transients - stores data in the options table</li>
<li>For 1000s of values use the object cache</li>
<li>Object cache can organise cache keys into groups</li>
</ul>
</li>
<li>Cache stampedes: What happens when cache expires?

<ul>
<li>One user triggers the remote request</li>
<li>then the next user also triggers it (before it&rsquo;s completed)</li>
<li>and another&hellip; STAMPEDE!</li>
<li><code>tlc_transient</code> - handles this problem: soft expiration - data gets
marked as expired but not deleted until the new data is available (!)</li>
</ul>
</li>
<li>Html fragment caching

<ul>
<li>e.g. A complex footer that&rsquo;s the same on every page</li>
<li><code>CWS_Fragment_Cache</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Not Break Permalinks in WordPress]]></title>
    <link href="http://dgmstuart.github.io/blog/2015/02/06/how-to-not-break-permalinks-in-wordpress/"/>
    <updated>2015-02-06T00:13:40+00:00</updated>
    <id>http://dgmstuart.github.io/blog/2015/02/06/how-to-not-break-permalinks-in-wordpress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a blog post for <a href="https://www.dxw.com/">work</a> about how much you can and can&rsquo;t mess around with urls in WordPress before old links stop working. It boils down to 5 rules:</p>

<ol>
<li>Editing Post slugs doesn’t break old links</li>
<li>Editing Post url structure (the permalinks) doesn’t break old links</li>
<li>Changing both the permalink structure and the slug will break old links</li>
<li>Editing the parent/child relationships of pages doesn’t break old links</li>
<li>Editing the slugs of pages will break old links</li>
</ol>


<p>For more details read the full post on the dxw blog: <a href="https://www.dxw.com/2015/02/keeping-traffic-flowing-to-your-wordpress-site-after-a-big-restructuring/">Keeping traffic flowing to your WordPress site after a big restructuring</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Europe 2014 Notes - 2.4: Code Deodorant]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-4-code-deodorant/"/>
    <updated>2014-09-28T10:27:07+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-4-code-deodorant</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://2014.europe.wordcamp.org/">WordCamp Europe</a> in Sofia - taking rough notes on some of the talks</em></p>

<p>Tom Nowell (cftp) <a href="http://2014.europe.wordcamp.org/session/tom-nowell/">http://2014.europe.wordcamp.org/session/tom-nowell/</a></p>

<ul>
<li>Now when running vanilla WP without plugins you shouldn&rsquo;t see any warnings, so all warnings are things you should pay attention to</li>
<li>&lsquo;@&rsquo; swallows errors - hides them.</li>
<li><a href="http://codex.wordpress.org/Plugin_API/Action_Reference/pre_get_posts">pre_get_posts action</a> - useful for removing complexity: modifying queries before they get run</li>
<li>Law of Demeter &ldquo;if you&rsquo;re talking to something, only talk to the things directly adjacent to you&rdquo;</li>
<li>No global variables - random ordering of tests can help to show up issues.</li>
<li>Tools for code quality:

<ul>
<li>php syntax checking - if your editor isn&rsquo;t doing this you&rsquo;re doing it wrong. PHP Storm does this</li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">php code sniffer</a> - give it coding standards - it&rsquo;ll check them</li>
<li><a href="https://github.com/Halleck45/PhpMetrics">php Metrics</a></li>
<li>phpLOC - tells you how many lines, classes, namespaces, measure of code complexity</li>
<li><a href="https://github.com/phpmd/phpmd">php Mess detector</a> - fuzzy matching: helps detect typos and join up e.g. misspelled variables which might be the same thing</li>
<li>NPath &amp; Cyclomatic complexity - Cycl = number of points at which code may diverge, NPath is number of execution paths through the code.

<ul>
<li>NPath complexity is roughly equivalent to the number of unit tests that you need to have to fully test the function</li>
</ul>
</li>
</ul>
</li>
<li>Lots of WP functions have incredibly large npath complexity - WP_Query::get_posts is insanely large. Even larger in WP 4.0

<ul>
<li><a href="http://www.tomjn.com/390/wp_queryget_posts/">http://www.tomjn.com/390/wp_queryget_posts/</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Europe 2014 Notes - 2.3: The Next Generation Hosting Stack]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-3-the-next-generation-hosting-stack/"/>
    <updated>2014-09-28T09:33:02+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-3-the-next-generation-hosting-stack</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://2014.europe.wordcamp.org/">WordCamp Europe</a> in Sofia - taking rough notes on some of the talks</em></p>

<p>Mark Jaquith (@markjaquith) <a href="http://2014.europe.wordcamp.org/session/mark-jaquith/">http://2014.europe.wordcamp.org/session/mark-jaquith/</a></p>

<ul>
<li>Why is performance important?

<ul>
<li>It&rsquo;s not about overall speed - it&rsquo;s about the frustration of being interrupted</li>
<li>Everyone hates Lag</li>
</ul>
</li>
<li>WP has a bad rep for speed

<ul>
<li>no matter what wp core do, WP DB&rsquo;s are getting bigger, lots of functionality, lots of plugins</li>
</ul>
</li>
<li>WP is dynamic - everything is built on the fly

<ul>
<li>Why don&rsquo;t we just generate static files? - No persistent caching in core. Pages are so dynamic: search results etc. Only a small number of pages can be cached</li>
</ul>
</li>
<li>For the purposes of this talk: speed = speed of download of just the html page (not css or other assets)</li>
<li>3+ seconds = EMERGENCY</li>
<li>1-3 seconds = Slow</li>
<li>100-250ms = fast</li>
<li>&lt;100ms = instant</li>
<li>Many hosts don&rsquo;t help with static caching</li>
<li>Virtual server hosting - what to look for

<ul>
<li>Are they going to be around for a while?</li>
<li>What&rsquo;s their raw performance - lots of people have done hardcore speed tests - easily googleable</li>
<li>Value for money</li>
<li>Tool support - provisioning scripts, auto backup</li>
<li>Recommended: Linode, Digital Ocean</li>
</ul>
</li>
</ul>


<h2>Web Server</h2>

<ul>
<li>&ldquo;Nginx is the best thing to happen to web servers ever&rdquo;</li>
<li>Apache approach - php is baked in. That means there&rsquo;s an overhead for each request</li>
<li>Nginx approach - can&rsquo;t have php baked in. PHP-FPM runs php</li>
<li>PHP 5.5 has significant performance improvements over previous versions</li>
<li>HHVM - facebook project: transcodes php into machine code on the fly, with caching = crazy fast

<ul>
<li>Might not be production stable - need monitoring to catch when it crashes</li>
</ul>
</li>
</ul>


<h2>Database</h2>

<ul>
<li>MySQL is not the only option: MariaDB, Percona</li>
<li>HyperDB - project for providing a layer to manage lots of database instances</li>
</ul>


<h2>Caching</h2>

<h3>Page caching:</h3>

<ul>
<li>Questions - who, what, how long. Answers: Anonymous???, front of site, minutes, maybe hours???.</li>
<li>Nginx has a cache</li>
<li>Varnish is another option, but is another moving part</li>
<li>Plugins are tightly integrated with WP, but run in php so are much slower</li>
</ul>


<h3>Object caching:</h3>

<ul>
<li>Recommend using Redis (Pantheon uses it)</li>
<li>Memcached - used to be a recommendation. Restarting flushes the data - can cause massive spikes in load</li>
<li>Mark&rsquo;s wrappers:

<ul>
<li>TLC Tranients <a href="http://bitly/tlc-transients">http://bitly/tlc-transients</a></li>
<li>Fragment caching: <a href="http://bitly/fragment-cache">http://bitly/fragment-cache</a></li>
</ul>
</li>
</ul>


<h3>The next generation stack</h3>

<p><img src="https://pbs.twimg.com/media/Bym-26pCcAAyPVd.jpg:large" alt="The next generation WordPress hosting stack" /></p>

<ul>
<li><p>Audience qu Hyper db - works with MariaDB &amp; Percona?</p>

<ul>
<li>AFAIK yes</li>
</ul>
</li>
<li><p>My qu - can you make core use Redis for your object cache or is that just for your own caching</p>

<ul>
<li>Yes - you configure an object cache and core will use it to cache posts, taxonomies, a bunch of other things.</li>
</ul>
</li>
<li><p>Audience qu: What do you use for performance monitoring</p>

<ul>
<li>NewRelic: very expensive, but gives you amazing insights</li>
</ul>
</li>
</ul>


<p>*</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Europe 2014 Notes - 1.5: Postmodern Wordpress]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/09/27/wordcamp-europe-2014-notes-5-postmodern-wordpress/"/>
    <updated>2014-09-27T12:32:07+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/09/27/wordcamp-europe-2014-notes-5-postmodern-wordpress</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://2014.europe.wordcamp.org/">WordCamp Europe</a> in Sofia - taking rough notes on some of the talks</em></p>

<p>Andrew Nacin: <a href="http://2014.europe.wordcamp.org/session/andrew-nacin/">http://2014.europe.wordcamp.org/session/andrew-nacin/</a></p>

<ul>
<li>WP enables non-devs to do dev

<ul>
<li>Low barrier to entry</li>
<li>gateway drug</li>
</ul>
</li>
<li>WP is increasing in complexity

<ul>
<li>Part of it is about migrating functionality into js</li>
</ul>
</li>
<li>The world of web dev is getting more complicated: html5, css3 - (Raises barrier to entry??)</li>
<li>&ldquo;We&rsquo;re really good at managing backwards compatibility&rdquo;</li>
<li>Dev focus is on improving the UX: source of complexity</li>
<li>Improving docs for devs is important - experienced devs forget that it&rsquo;s an issue.</li>
<li>Complexity needs to not come at the cost of the philosophies: trivial setup etc.</li>
<li>&hellip;balanced against drawing the experienced</li>
<li>&ldquo;you know what? I&rsquo;ll build this site in WP, because WP doesn&rsquo;t make me want to tear my hair out any more&rdquo;</li>
<li>WP needs to be more consistent: decrease the time spent searching through docs/trying to work out what an argument means

<ul>
<li>inconsistencies trip people up</li>
<li>struggle - can&rsquo;t break backwards-compatability</li>
</ul>
</li>
<li>Objects should (/will have?) implementations of <a href="http://php.net/manual/en/class.jsonserializable.php">http://php.net/manual/en/class.jsonserializable.php</a></li>
<li>A lot of people don&rsquo;t actually know they&rsquo;re writing php (!)</li>
<li>“ I really can’t wait to have [these features] because it’s, like, <em>Sanity</em> and that’s a good thing to have”</li>
<li>WP uses objects but in a functional way - actually going OO wouldn&rsquo;t make sense (?)</li>
<li><a href="http://backpress.org/">http://backpress.org/</a></li>
<li>WP should only load the necessary files - not 120.</li>
<li>Also you should be able to pull individual files out and use them in non-wp projects.

<ul>
<li>The way you do that is by decoupling -> this also makes debugging easier</li>
</ul>
</li>
<li><p>You shouldn&rsquo;t need to understand what&rsquo;s going on under the hood in WP in order to build stuff which works.</p></li>
<li><p>Audience observation - Automattic - preferred to use REST API to WP function calls (?) because the api is more consistent</p></li>
<li><p>Audience qu - I&rsquo;m missing a debugger</p>

<ul>
<li>Use an IDE. We could be doing more to make debugging easier, but there are a bunch of tools out there which help.</li>
</ul>
</li>
<li><p>Posts might end up with relationships. Terms will probably end up with metadata</p>

<ul>
<li>Post relationships now (via a plugin): <a href="https://wordpress.org/plugins/posts-to-posts/">https://wordpress.org/plugins/posts-to-posts/</a></li>
</ul>
</li>
<li><p>&ldquo;It&rsquo;s not a matter of doing it, it&rsquo;s a matter of planning it out so that we don&rsquo;t have to Re-do it in a year&rdquo;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
