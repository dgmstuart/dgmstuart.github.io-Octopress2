<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wordpress | dgms code]]></title>
  <link href="http://dgmstuart.github.io/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://dgmstuart.github.io/"/>
  <updated>2015-02-23T23:42:51+00:00</updated>
  <id>http://dgmstuart.github.io/</id>
  <author>
    <name><![CDATA[Duncan Stuart]]></name>
    <email><![CDATA[dgmstuart@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Not Break Permalinks in WordPress]]></title>
    <link href="http://dgmstuart.github.io/blog/2015/02/06/how-to-not-break-permalinks-in-wordpress/"/>
    <updated>2015-02-06T00:13:40+00:00</updated>
    <id>http://dgmstuart.github.io/blog/2015/02/06/how-to-not-break-permalinks-in-wordpress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a blog post for <a href="https://www.dxw.com/">work</a> about how much you can and can&rsquo;t mess around with urls in WordPress before old links stop working. It boils down to 5 rules:</p>

<ol>
<li>Editing Post slugs doesn’t break old links</li>
<li>Editing Post url structure (the permalinks) doesn’t break old links</li>
<li>Changing both the permalink structure and the slug will break old links</li>
<li>Editing the parent/child relationships of pages doesn’t break old links</li>
<li>Editing the slugs of pages will break old links</li>
</ol>


<p>For more details read the full post on the dxw blog: <a href="https://www.dxw.com/2015/02/keeping-traffic-flowing-to-your-wordpress-site-after-a-big-restructuring/">Keeping traffic flowing to your WordPress site after a big restructuring</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Europe 2014 Notes - 2.4: Code Deodorant]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-4-code-deodorant/"/>
    <updated>2014-09-28T10:27:07+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-4-code-deodorant</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://2014.europe.wordcamp.org/">WordCamp Europe</a> in Sofia - taking rough notes on some of the talks</em></p>

<p>Tom Nowell (cftp) <a href="http://2014.europe.wordcamp.org/session/tom-nowell/">http://2014.europe.wordcamp.org/session/tom-nowell/</a></p>

<ul>
<li>Now when running vanilla WP without plugins you shouldn&rsquo;t see any warnings, so all warnings are things you should pay attention to</li>
<li>&lsquo;@&rsquo; swallows errors - hides them.</li>
<li><a href="http://codex.wordpress.org/Plugin_API/Action_Reference/pre_get_posts">pre_get_posts action</a> - useful for removing complexity: modifying queries before they get run</li>
<li>Law of Demeter &ldquo;if you&rsquo;re talking to something, only talk to the things directly adjacent to you&rdquo;</li>
<li>No global variables - random ordering of tests can help to show up issues.</li>
<li>Tools for code quality:

<ul>
<li>php syntax checking - if your editor isn&rsquo;t doing this you&rsquo;re doing it wrong. PHP Storm does this</li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">php code sniffer</a> - give it coding standards - it&rsquo;ll check them</li>
<li><a href="https://github.com/Halleck45/PhpMetrics">php Metrics</a></li>
<li>phpLOC - tells you how many lines, classes, namespaces, measure of code complexity</li>
<li><a href="https://github.com/phpmd/phpmd">php Mess detector</a> - fuzzy matching: helps detect typos and join up e.g. misspelled variables which might be the same thing</li>
<li>NPath &amp; Cyclomatic complexity - Cycl = number of points at which code may diverge, NPath is number of execution paths through the code.

<ul>
<li>NPath complexity is roughly equivalent to the number of unit tests that you need to have to fully test the function</li>
</ul>
</li>
</ul>
</li>
<li>Lots of WP functions have incredibly large npath complexity - WP_Query::get_posts is insanely large. Even larger in WP 4.0

<ul>
<li><a href="http://www.tomjn.com/390/wp_queryget_posts/">http://www.tomjn.com/390/wp_queryget_posts/</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Europe 2014 Notes - 2.3: The Next Generation Hosting Stack]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-3-the-next-generation-hosting-stack/"/>
    <updated>2014-09-28T09:33:02+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/09/28/wordcamp-europe-2014-notes-2-dot-3-the-next-generation-hosting-stack</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://2014.europe.wordcamp.org/">WordCamp Europe</a> in Sofia - taking rough notes on some of the talks</em></p>

<p>Mark Jaquith (@markjaquith) <a href="http://2014.europe.wordcamp.org/session/mark-jaquith/">http://2014.europe.wordcamp.org/session/mark-jaquith/</a></p>

<ul>
<li>Why is performance important?

<ul>
<li>It&rsquo;s not about overall speed - it&rsquo;s about the frustration of being interrupted</li>
<li>Everyone hates Lag</li>
</ul>
</li>
<li>WP has a bad rep for speed

<ul>
<li>no matter what wp core do, WP DB&rsquo;s are getting bigger, lots of functionality, lots of plugins</li>
</ul>
</li>
<li>WP is dynamic - everything is built on the fly

<ul>
<li>Why don&rsquo;t we just generate static files? - No persistent caching in core. Pages are so dynamic: search results etc. Only a small number of pages can be cached</li>
</ul>
</li>
<li>For the purposes of this talk: speed = speed of download of just the html page (not css or other assets)</li>
<li>3+ seconds = EMERGENCY</li>
<li>1-3 seconds = Slow</li>
<li>100-250ms = fast</li>
<li>&lt;100ms = instant</li>
<li>Many hosts don&rsquo;t help with static caching</li>
<li>Virtual server hosting - what to look for

<ul>
<li>Are they going to be around for a while?</li>
<li>What&rsquo;s their raw performance - lots of people have done hardcore speed tests - easily googleable</li>
<li>Value for money</li>
<li>Tool support - provisioning scripts, auto backup</li>
<li>Recommended: Linode, Digital Ocean</li>
</ul>
</li>
</ul>


<h2>Web Server</h2>

<ul>
<li>&ldquo;Nginx is the best thing to happen to web servers ever&rdquo;</li>
<li>Apache approach - php is baked in. That means there&rsquo;s an overhead for each request</li>
<li>Nginx approach - can&rsquo;t have php baked in. PHP-FPM runs php</li>
<li>PHP 5.5 has significant performance improvements over previous versions</li>
<li>HHVM - facebook project: transcodes php into machine code on the fly, with caching = crazy fast

<ul>
<li>Might not be production stable - need monitoring to catch when it crashes</li>
</ul>
</li>
</ul>


<h2>Database</h2>

<ul>
<li>MySQL is not the only option: MariaDB, Percona</li>
<li>HyperDB - project for providing a layer to manage lots of database instances</li>
</ul>


<h2>Caching</h2>

<h3>Page caching:</h3>

<ul>
<li>Questions - who, what, how long. Answers: Anonymous???, front of site, minutes, maybe hours???.</li>
<li>Nginx has a cache</li>
<li>Varnish is another option, but is another moving part</li>
<li>Plugins are tightly integrated with WP, but run in php so are much slower</li>
</ul>


<h3>Object caching:</h3>

<ul>
<li>Recommend using Redis (Pantheon uses it)</li>
<li>Memcached - used to be a recommendation. Restarting flushes the data - can cause massive spikes in load</li>
<li>Mark&rsquo;s wrappers:

<ul>
<li>TLC Tranients <a href="http://bitly/tlc-transients">http://bitly/tlc-transients</a></li>
<li>Fragment caching: <a href="http://bitly/fragment-cache">http://bitly/fragment-cache</a></li>
</ul>
</li>
</ul>


<h3>The next generation stack</h3>

<p><img src="https://pbs.twimg.com/media/Bym-26pCcAAyPVd.jpg:large" alt="The next generation WordPress hosting stack" /></p>

<ul>
<li><p>Audience qu Hyper db - works with MariaDB &amp; Percona?</p>

<ul>
<li>AFAIK yes</li>
</ul>
</li>
<li><p>My qu - can you make core use Redis for your object cache or is that just for your own caching</p>

<ul>
<li>Yes - you configure an object cache and core will use it to cache posts, taxonomies, a bunch of other things.</li>
</ul>
</li>
<li><p>Audience qu: What do you use for performance monitoring</p>

<ul>
<li>NewRelic: very expensive, but gives you amazing insights</li>
</ul>
</li>
</ul>


<p>*</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Europe 2014 Notes - 1.5: Postmodern Wordpress]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/09/27/wordcamp-europe-2014-notes-5-postmodern-wordpress/"/>
    <updated>2014-09-27T12:32:07+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/09/27/wordcamp-europe-2014-notes-5-postmodern-wordpress</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://2014.europe.wordcamp.org/">WordCamp Europe</a> in Sofia - taking rough notes on some of the talks</em></p>

<p>Andrew Nacin: <a href="http://2014.europe.wordcamp.org/session/andrew-nacin/">http://2014.europe.wordcamp.org/session/andrew-nacin/</a></p>

<ul>
<li>WP enables non-devs to do dev

<ul>
<li>Low barrier to entry</li>
<li>gateway drug</li>
</ul>
</li>
<li>WP is increasing in complexity

<ul>
<li>Part of it is about migrating functionality into js</li>
</ul>
</li>
<li>The world of web dev is getting more complicated: html5, css3 - (Raises barrier to entry??)</li>
<li>&ldquo;We&rsquo;re really good at managing backwards compatibility&rdquo;</li>
<li>Dev focus is on improving the UX: source of complexity</li>
<li>Improving docs for devs is important - experienced devs forget that it&rsquo;s an issue.</li>
<li>Complexity needs to not come at the cost of the philosophies: trivial setup etc.</li>
<li>&hellip;balanced against drawing the experienced</li>
<li>&ldquo;you know what? I&rsquo;ll build this site in WP, because WP doesn&rsquo;t make me want to tear my hair out any more&rdquo;</li>
<li>WP needs to be more consistent: decrease the time spent searching through docs/trying to work out what an argument means

<ul>
<li>inconsistencies trip people up</li>
<li>struggle - can&rsquo;t break backwards-compatability</li>
</ul>
</li>
<li>Objects should (/will have?) implementations of <a href="http://php.net/manual/en/class.jsonserializable.php">http://php.net/manual/en/class.jsonserializable.php</a></li>
<li>A lot of people don&rsquo;t actually know they&rsquo;re writing php (!)</li>
<li>“ I really can’t wait to have [these features] because it’s, like, <em>Sanity</em> and that’s a good thing to have”</li>
<li>WP uses objects but in a functional way - actually going OO wouldn&rsquo;t make sense (?)</li>
<li><a href="http://backpress.org/">http://backpress.org/</a></li>
<li>WP should only load the necessary files - not 120.</li>
<li>Also you should be able to pull individual files out and use them in non-wp projects.

<ul>
<li>The way you do that is by decoupling -> this also makes debugging easier</li>
</ul>
</li>
<li><p>You shouldn&rsquo;t need to understand what&rsquo;s going on under the hood in WP in order to build stuff which works.</p></li>
<li><p>Audience observation - Automattic - preferred to use REST API to WP function calls (?) because the api is more consistent</p></li>
<li><p>Audience qu - I&rsquo;m missing a debugger</p>

<ul>
<li>Use an IDE. We could be doing more to make debugging easier, but there are a bunch of tools out there which help.</li>
</ul>
</li>
<li><p>Posts might end up with relationships. Terms will probably end up with metadata</p>

<ul>
<li>Post relationships now (via a plugin): <a href="https://wordpress.org/plugins/posts-to-posts/">https://wordpress.org/plugins/posts-to-posts/</a></li>
</ul>
</li>
<li><p>&ldquo;It&rsquo;s not a matter of doing it, it&rsquo;s a matter of planning it out so that we don&rsquo;t have to Re-do it in a year&rdquo;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordCamp Europe 2014 Notes - 1.3: Styling the WordPress Admin]]></title>
    <link href="http://dgmstuart.github.io/blog/2014/09/27/wordcamp-europe-2014-notes-3-styling-the-wordpress-admin/"/>
    <updated>2014-09-27T09:32:55+01:00</updated>
    <id>http://dgmstuart.github.io/blog/2014/09/27/wordcamp-europe-2014-notes-3-styling-the-wordpress-admin</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m at <a href="http://2014.europe.wordcamp.org/">WordCamp Europe</a> in Sofia - taking rough notes on some of the talks</em></p>

<p>Konstantin Dankov <a href="http://2014.europe.wordcamp.org/session/konstantin-dankov/">http://2014.europe.wordcamp.org/session/konstantin-dankov/</a></p>

<p><img src="http://photos-a.ak.instagram.com/hphotos-ak-xfp1/1742413_291384914397664_162274686_n.jpg" alt="sketchnotes by @studionetting" /></p>

<p><em>Awesome sketchnotes by <a href="http://instagram.com/p/tcl0LKNkJp">@studionetting</a></em></p>

<ul>
<li><p>Why style the admin?</p>

<ul>
<li>make things simpler for the user</li>
<li>save time by optimising workflows - supporting power users - removing unnecessary steps: e.g. jump straight to a particular page.</li>
<li>Branding - sometimes larger organisations would like their own branding inside

<ul>
<li>Important to not go overboard! Use a little to do a lot.</li>
</ul>
</li>
</ul>
</li>
<li><p>Why NOT to do it</p>

<ul>
<li>There&rsquo;s a large cost to supporting it:

<ul>
<li>There&rsquo;s a lot of it!</li>
</ul>
</li>
<li>Clashes with plugin styles: can cause plugins to break</li>
</ul>
</li>
<li><p>Consider the experience of editors vs admins</p></li>
<li><p>Adding a custom post type</p>

<ul>
<li>Defaults (all overridable when registering the post type)

<ul>
<li>It goes to the bottom of the list</li>
<li>It has the same icon as other post</li>
</ul>
</li>
</ul>
</li>
<li><p>Using filters the order of menu items can be managed in a more coherent way: explicitly naming the order rather than using index numbers.</p></li>
<li><p>Preference: When the custom post type is specific to that project then this menu-modifying code should be in the theme, along with the post type itself: moving it out into a plugin just adds complexity.</p></li>
<li><p>Removing the dashboard to jump straight to the posts: useful if your primary thing is generating new content</p></li>
<li><p>There&rsquo;s a lot of complexity in the WP admin css: responsive styles, Right->Left styles. Making modifications are a lot more work than they look</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
